name: Publish Presto Image

on:
  workflow_dispatch:
    inputs:
      branch_or_tag:
        description: 'Branch or tag to checkout (e.g., master, 0.295)'
        required: true
        default: 'master'
      os:
        description: 'Operating system (ubuntu/centos)'
        required: true
        default: 'centos'
        type: choice
        options:
          - centos
          - ubuntu
      tag_suffix:
        description: 'Tag suffix (can be empty)'
        required: false
        default: ''
      tag_latest:
        description: 'Tag the image as latest'
        type: boolean
        default: true
        required: false

concurrency:
  group: publish-presto-image
  cancel-in-progress: false

env:
  JAVA_VERSION: ${{ vars.JAVA_VERSION || '17' }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION || 'temurin' }}
  DOCKER_REPO: ${{ github.repository }}
  ORG_NAME: ${{ github.repository_owner }}
  IMAGE_NAME: presto
  GIT_CI_USER: ${{ vars.GIT_CI_USER || 'prestodb-ci' }}
  GIT_CI_EMAIL: ${{ vars.GIT_CI_EMAIL || 'ci@lists.prestodb.io' }}
  JMX_PROMETHEUS_JAVAAGENT_VERSION: 0.20.0

jobs:
  build-and-publish-presto-image:
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/ppc64le]
      fail-fast: false
    runs-on: ubuntu-latest
    environment: release
    timeout-minutes: 150
    permissions:
      packages: write
      contents: read
    steps:
      - name: Set up JDK ${{ env.JAVA_DISTRIBUTION }}/${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_or_tag }}
          fetch-depth: 1

      - name: Configure git
        run: |
          git config --global user.email "${{ env.GIT_CI_EMAIL }}"
          git config --global user.name "${{ env.GIT_CI_USER }}"

          echo "Currently on: $(git rev-parse --abbrev-ref HEAD)"
          echo "Commit SHA: $(git rev-parse HEAD)"
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Extract version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Raw version: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "Failed to extract project version with Maven"
            exit 1
          fi

          if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
            # Remove -SNAPSHOT and append commit SHA
            CLEAN_VERSION=${VERSION%-SNAPSHOT}
            TAG_VERSION="${CLEAN_VERSION}-${COMMIT_SHA}"
            echo "SNAPSHOT version detected, using: $TAG_VERSION"
          else
            TAG_VERSION="$VERSION"
            echo "Release version detected, using: $TAG_VERSION"
          fi

          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Build Presto Server
        run: |
          df -h
          ./mvnw clean install -DskipTests -T1C
          df -h

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up builder
        run: |
          docker buildx create --name container --use
          docker buildx inspect --bootstrap

      - name: Set image tag and base image
        run: |
          if [[ -n "${{ inputs.tag_suffix }}" ]]; then
            echo "IMAGE_TAG=${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ inputs.tag_suffix }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_ENV
          fi

          if [[ "${{ inputs.os }}" == "ubuntu" ]]; then
            echo "BASE_IMAGE=ubuntu:22.04" >> $GITHUB_ENV
          else
            echo "BASE_IMAGE=quay.io/centos/centos:stream9" >> $GITHUB_ENV
          fi

      - name: Move artifacts to docker directory
        run: |
          mkdir -p docker_build
          cp presto-server/target/presto-server-*.tar.gz docker_build/
          cp presto-cli/target/presto-cli-*-executable.jar docker_build/
          cp -r docker/etc docker_build/
          cp docker/entrypoint.sh docker_build/

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: docker_build
          platforms: ${{ matrix.platform }}
          push: true
          build-args: |
            PRESTO_VERSION=${{ env.VERSION }}
            PRESTO_PKG=presto-server-${{ env.VERSION }}.tar.gz
            PRESTO_CLI_JAR=presto-cli-${{ env.VERSION }}-executable.jar
            JMX_PROMETHEUS_JAVAAGENT_VERSION=${{ env.JMX_PROMETHEUS_JAVAAGENT_VERSION }}
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ inputs.tag_latest == 'true' && format('{0}/{1}:latest', env.ORG_NAME, env.IMAGE_NAME) || '' }}

  create-manifest:
    needs: build-and-publish-presto-image
    runs-on: ubuntu-latest
    environment: release
    permissions:
      packages: write
      contents: read
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_or_tag }}
          fetch-depth: 1

      - name: Extract version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Raw version: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "Failed to extract project version with Maven"
            exit 1
          fi

          if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
            # Remove -SNAPSHOT and append commit SHA
            CLEAN_VERSION=${VERSION%-SNAPSHOT}
            COMMIT_SHA=$(git rev-parse --short HEAD)
            TAG_VERSION="${CLEAN_VERSION}-${COMMIT_SHA}"
            echo "SNAPSHOT version detected, using: $TAG_VERSION"
          else
            TAG_VERSION="$VERSION"
            echo "Release version detected, using: $TAG_VERSION"
          fi

          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Create and push multi-arch manifest
        run: |
          ORG_NAME="${{ github.repository_owner }}"
          IMAGE_NAME="presto"
          VERSION="${{ env.VERSION }}"
          
          # Determine tag suffix
          if [[ -n "${{ inputs.tag_suffix }}" ]]; then
            TAG_SUFFIX="-${{ inputs.tag_suffix }}"
          else
            TAG_SUFFIX=""
          fi
          
          # Create manifest for the versioned tag
          MANIFEST_TAG="${ORG_NAME}/${IMAGE_NAME}:${VERSION}${TAG_SUFFIX}"
          
          echo "Creating manifest: ${MANIFEST_TAG}"
          docker manifest create ${MANIFEST_TAG} \
            ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "amd64").digest') \
            ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "arm64").digest') \
            ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "ppc64le").digest')
          
          docker manifest push ${MANIFEST_TAG}
          
          # Create latest manifest if requested
          if [[ "${{ inputs.tag_latest }}" == "true" ]]; then
            LATEST_MANIFEST="${ORG_NAME}/${IMAGE_NAME}:latest"
            
            echo "Creating latest manifest: ${LATEST_MANIFEST}"
            docker manifest create ${LATEST_MANIFEST} \
              ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "amd64").digest') \
              ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "arm64").digest') \
              ${MANIFEST_TAG}@$(docker manifest inspect ${MANIFEST_TAG} | jq -r '.manifests[] | select(.platform.architecture == "ppc64le").digest')
            
            docker manifest push ${LATEST_MANIFEST}
          fi

# Made with Bob
